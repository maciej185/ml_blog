"""Module for interacting with the MongoDb database."""
from pymongo import MongoClient, database
from typing import Any, Optional
from bson.objectid import ObjectId
from datetime import datetime
from dotenv import load_dotenv

load_dotenv()
import os

MONGO_HOST = os.getenv("MONGO_HOST")
MONGO_PORT = os.getenv("MONGO_PORT")

CLIENT = MongoClient(MONGO_HOST, int(MONGO_PORT))

# dependency
def get_mongo_db():
    return CLIENT["ml_blog"]

def get_documents(mongo_db: database.Database, collection_name: str) -> list[dict[Any, Any]]:
    """Return all documents in a given collection.
    
    Args:
        mongo_db: An instance of the database.Database,
                representing a single MongoDB database.
        collection_name: Name of the collection that is 
                        assumed to be present in the
                        database. 
    Returns:
        A list of dictionaries, where each dictionary 
        represents a document fetched from the collection.
    """
    collection = mongo_db[collection_name]
    docs = [document for document in collection.find()] 
    for doc in docs:
        doc["_id"] = str(doc["_id"])
    return docs

def get_model_by_id(_id: str, mongo_db: database.Database) -> Optional[dict[Any, Any]]:
    """Return a model with the provided ID.
    
    Args:
        mongo_db: An instance of the database.Database,
                representing a single MongoDB database.
        _id: ID of the Document representing the 
                desired model.
    
    Returns:
        A single Document representing the desired
        model in a dictionary form if it was found,
        None otherwise.
    """
    model = mongo_db["models"].find_one({"_id": ObjectId(_id)})
    model["_id"] = str(model["_id"]) 
    return model

def save_prediction(prediction_data: dict[Any, Any],  mongo_db: database.Database) -> ObjectId:
    """Save input data and prediction for a given mondel.
    
    Args:
        prediction_data: A dictionary containing the input data 
                            and the prediction. Types and number
                            of inputs might very between models 
                            hence the types are not specified.
        mongo_db: An instance of the database.Database,
                representing a single MongoDB database.

    Returns:
        An _id of the saved document in the form of an instance
        of the ObjectId class.
    """
    collection = mongo_db["predictions"]
    prediction_data['prediction_time'] = datetime.now()
    doc_id = collection.insert_one(prediction_data).inserted_id
    return doc_id

def get_predictions(user_id: int,  mongo_db: database.Database) -> list[dict[Any, Any]]:
    """Return predictions generated by a given user.
    
    Args:
        user_id: ID of the user who generated the 
                    predictions that will be fetched from the 
                    DB.
        mongo_db: An instance of the database.Database,
                representing a single MongoDB database.
    Returns:
        A list with dictionaries containing info about 
        predictions generated using various models, fetched
        from MongoDB.
    """
    collection = mongo_db["predictions"]
    docs = collection.find({"user_id": user_id})
    predictions = [prediction for prediction in docs]
    for prediction in predictions:
        prediction["_id"] = str(prediction["_id"]) 
    return predictions




